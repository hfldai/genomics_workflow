from snakemake.utils import validate
from snakemake.utils import min_version
import numpy as np
from functools import partial
import os
from datetime import date, datetime
import yaml
import subprocess
# from scripts.python import input_functions as ifn


# Need > 5.3.0 for reports and linting.
min_version("5.14.0")

# # install github dependencies
# subprocess.run(["Rscript", "scripts/R/install_github_dependencies.R"])

# Parse and validate config file.
configfile: "config/config.yaml"

validate(config, schema="config/schema/config.schema.yaml")


proj = config["general"]["project"]
outdir = config["general"]["output_dir"]
projdir = os.path.join(outdir, proj)
tmpdir = os.path.join(projdir, "tmp")
logdir = os.path.join(projdir, "log")
aligner = config["alignment"]["aligner"]
build = config["general"]["genome_build"]
v = config["version"]
public_path = "https://datashare.molbiol.ox.ac.uk/public/project/hugheslab/avocato"

if not os.path.isdir(logdir):
    os.makedirs(logdir)

onsuccess:
    if not os.path.isdir(projdir):
        os.mkdir(projdir)
    with open(f"{projdir}/{proj}.yaml", 'w') as backup:
        backup.write(f"# Auto-generated by bulk_atac_e2e v{v} on {datetime.now().strftime('%B %d %Y at %H:%M:%S')}.\n")
        yaml.dump(config, backup, indent = 2)

# '''Setting up shortcut to a few config parameters.'''
seed               = config["general"]["seed"]
# peakcall    = config["general"]["peak_caller"]
# # size               = config["general"]["fragment_size"]
# check_aligner      = config["quality_control"]["aligner"]
# # public_path        = "https://datashare.molbiol.ox.ac.uk/public/project/hugheslab/avocato"

prefix = "all"

'''
Setting constraints for the wildcards
New in the refactor, keep these all
in the same place, otherwise it gets
very confusing having them scattered
across the files.
'''
# wildcard_constraints:
#     sample = "\w+", # A single word, otherwise trips the illumina filters
#     read = "(R|I)\d", # This is all we can deal with right now
#     lane = "\d+", # Has to be a number.
#     aligner = "(bwa|bwamem2|bowtie)"

# Fix seed (also used in downsampling).
np.random.seed(seed)

'''
This rule is run by default on execution. Modify it
for any output that you are trying to produce.
The current end point is the checkpoint target 
at the end of stage2. (NOTE: SHOULD BE ACTIVELY UPDATING & INCLUDE OTHER IMPORTANT CHECKPOINTS)
'''
# if (lead_genetics == "None") | (genetics == "None"):
# rule all:
#     input: 
#         expand(outdir + "/{proj}/01_fastqc/.done.01_fastqc",\
#                     proj = proj   
#                     ),
# else:
#     rule all:
#         input: 
#             expand("runs/{name}/00_summary/01_records/stage1/bam_qc_stats.csv",\
#                         name = name,\
#                         prefix = prefix
#                         ),
#             expand("runs/{name}/00_summary/02_plots/stage1/{file}.svg",\
#                     name = name,\
#                     file=["Per_fragment-size_distribution", "Per_fragment-TSS_enrichment", "Per_barcode-tss_enrichment-vs-fragment_count", "Per_barcode-Fragment_count_distribution"]\
#                     ),
#             expand("runs/{name}/04_stage2/04_intersecting_{size}_{method}/{genetics_name}/{file}.pdf",\
#                    name = name,\
#                    size = size,\
#                    method = method_peakcall,\
#                    genetics_name = genetics_name,\
#                    file = ["lead_genetics", "lead_genetics_logscale", "enrichment"]),
#             expand("runs/{name}/04_stage2/04_intersecting_{size}_{method}/{genetics_name}/{file}.pdf",\
#                    name = name,\
#                    size = size,\
#                    method = method_peakcall,\
#                    genetics_name = genetics_name,\
#                    file = ["enrichment"])

    

### Rules
'''
Input utilities: Tools facilitating the ingestion of data, both locally and from remote sources.
NOTE: This must be included before all other rules.'''
include: "rules/process.smk"
include: "rules/utils.smk"
include: "rules/download.smk"

# '''
# Stage2
# Split bam and peak call for each cluster
# Intersecting genetics
# '''
# include: "rules/04_stage2/stage2_high_res.smk"